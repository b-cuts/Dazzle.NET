using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Dazzle.Operations;
using Irony.Parsing;

namespace Dazzle.Query
{
    /// <summary>
    /// Dql builder of the <see cref="QueryExecutionPlan"/>.
    /// </summary>
    public class DqlQueryPlanBuilder
    {
        private Stack<string> scope;
        private IEnumerable<IOperationBuilder> builders;

        public DqlQueryPlanBuilder(IEnumerable<IOperationBuilder> builders)
        {
            if (builders == null)
            {
                throw new ArgumentNullException("builders");
            }
            this.scope = new Stack<string>();
            this.builders = builders;
        }

        /// <summary>
        /// Builds the <see cref="QueryExecutionPlan"/> by parsing the abstract syntax tree generated by the <see cref="DqlQueryGrammar"/>.
        /// </summary>
        /// <param name="node">Current node in the abstract syntax tree.</param>
        /// <param name="plan">The <see cref="QueryExecutionPlan"/> currently being built.</param>
        /// <returns><see cref="QueryExecutionPlan"/> that is prepared for execution against the database.</returns>
        public QueryExecutionPlan BuildQueryExecutionPlan(ParseTreeNode node, QueryExecutionPlan plan)
        {
            scope.Push(node.Term.Name);
            this.ReadClause(node, plan);

            foreach (ParseTreeNode child in node.ChildNodes)
            {
                this.BuildQueryExecutionPlan(child, plan);
            }

            scope.Pop();
            return plan;
        }

        /// <summary>
        /// Reads the current node in the abstract syntax tree.
        /// </summary>
        /// <param name="node">The current node in the abstract syntax tree.</param>
        /// <param name="plan">The <see cref="QueryExecutionPlan"/> currently being built.</param>
        private void ReadClause(ParseTreeNode node, QueryExecutionPlan plan)
        {
            foreach (var builder in this.builders)
            {
                if (scope.Count >= 2 && scope.ElementAt(scope.Count - 2) == builder.OperationName)
                {
                    builder.BuildOperation(scope, node, plan);
                }
            }
        }
    }
}